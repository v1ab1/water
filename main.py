import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
import schedule
import time
import os

from excel_handler import excel_handle
from graph_handler import graph_handle
from discounts_handler import discounts_handle
from discounts_sender import discounts_send
from pdf_maker import pdf_make

API_TOKEN = ''

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

my_file = open("update.txt", "r")
update = my_file.read()
my_file.close()

async def check_update(change):
    my_file = open("update.txt", "r")
    update = my_file.read()
    my_file.close()
    if change:
        update = "True" if update == "False" else "False"
        my_file = open("update.txt", "w")
        my_file.write(f'{update}')
        my_file.close()
    return update

kbFalse = [
    [
        InlineKeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="analysis"),
    ],
    [
        InlineKeyboardButton("–ê–∫—Ü–∏–∏", callback_data="discounts"),
    ],
    [
        InlineKeyboardButton('–í–∫–ª. –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ‚úÖ', callback_data="auto_update")
    ],
    [
        InlineKeyboardButton('–ó–∞–º–µ–Ω–∏—Ç—å Excel', callback_data="excel")
    ]
]

keyboardFalse = InlineKeyboardMarkup(inline_keyboard=kbFalse)

kbTrue = [
    [
        InlineKeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="analysis"),
    ],
    [
        InlineKeyboardButton("–ê–∫—Ü–∏–∏", callback_data="discounts"),
    ],
    [
        InlineKeyboardButton('–í—ã–∫–ª. –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µüö´', callback_data="auto_update")
    ],
    [
        InlineKeyboardButton('–ó–∞–º–µ–Ω–∏—Ç—å Excel', callback_data="excel")
    ]
]

keyboardTrue = InlineKeyboardMarkup(inline_keyboard=kbTrue)

yes = [
    [
        InlineKeyboardButton("–î–∞", callback_data="yes"),
    ],
]

yes_button = InlineKeyboardMarkup(inline_keyboard=yes)

sumbit = [
    [
        InlineKeyboardButton("–î–∞", callback_data="submit"),
    ],
    [
        InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel"),
    ]
]

sumbit_button = InlineKeyboardMarkup(inline_keyboard=sumbit)

choose_type = [
    [
        InlineKeyboardButton("PDF", callback_data="pdf"),
    ],
    [
        InlineKeyboardButton("–ö–∞—Ä—Ç–∏–Ω–∫–∞–º–∏", callback_data="pictures"),
    ],
    [
        InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"),
    ]
]

choose_type_keyboard = InlineKeyboardMarkup(inline_keyboard=choose_type)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±—è —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ –≤–æ–¥—ã –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫–µ! \n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É?", reply_markup=yes_button)


@dp.message_handler()
async def echo(message: types.Message):
    update = await check_update(False)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)

@dp.message_handler(content_types=['document'])
async def process_document(message: types.Message):
    doc = message.document
    await doc.download(destination_file='./temp_analysis.xlsx')
    await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å Excel —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?", reply_markup=sumbit_button)

@dp.callback_query_handler()
async def process_callback_button(callback_query: types.CallbackQuery):
    update = await check_update(False)
    if callback_query.data == 'analysis':
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, '–°–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è —Ç–µ–±—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞!')
        await bot.send_message(callback_query.from_user.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
        await excel_handle()
        await graph_handle()
        await bot.send_document(callback_query.from_user.id, open('analysis.xlsx', 'rb'))
        await bot.send_message(callback_query.from_user.id, '–ì–æ—Ç–æ–≤–æ! :)')
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)
        pass
    elif callback_query.data == 'discounts':
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫–∏?", reply_markup=choose_type_keyboard)
        pass
    elif callback_query.data == 'pictures':
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, '–°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏!')
        await bot.send_message(callback_query.from_user.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
        await discounts_handle()
        await discounts_send(bot, callback_query)
        await bot.send_message(callback_query.from_user.id, '–ì–æ—Ç–æ–≤–æ!...')
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)
        pass
    elif callback_query.data == 'pdf':
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, '–°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏!')
        await bot.send_message(callback_query.from_user.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
        await discounts_handle()
        await pdf_make()
        await bot.send_document(callback_query.from_user.id, open('discounts.pdf', 'rb'))
        await bot.send_message(callback_query.from_user.id, '–ì–æ—Ç–æ–≤–æ!...')
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)
        pass
    elif callback_query.data == 'auto_update':
        await callback_query.message.delete()
        if update == "True":
            await bot.send_message(callback_query.from_user.id, "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!")
        else:
            await bot.send_message(callback_query.from_user.id, "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ!")
        update = await check_update(True)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)
        pass
    elif callback_query.data == 'yes':
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)
        pass
    elif callback_query.data == 'excel':
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        await bot.send_message(callback_query.from_user.id, "–í–Ω–∏–º–∞–Ω–∏–µ!\n–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:\n1)–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–∞–π–ª–∞(–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–æ–µ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–∞–∫–∏–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)\n2)–ù–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–∞—Ç–∞–º–∏ –∏ —Ç–∞–∫–∏–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ñ–∞–π–ª–µ\n3)–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è 'analysis.xlsx'")
        pass
    elif callback_query.data == 'submit':
        await callback_query.message.delete()
        try:
            os.remove('old_analysis.xlsx')
        except:
            pass
        os.rename('analysis.xlsx', 'old_analysis.xlsx')
        os.rename('temp_analysis.xlsx', 'analysis.xlsx')
        await bot.send_message(callback_query.from_user.id, "–§–∞–π–ª –∑–∞–º–µ–Ω–µ–Ω")
        await bot.send_message(callback_query.from_user.id, "–ì–æ—Ç–æ–≤–æ!")
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)
        pass
    elif callback_query.data == 'cancel':
        await callback_query.message.delete()
        os.remove('temp_analysis.xlsx')
        await bot.send_message(callback_query.from_user.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)
        pass
    elif callback_query.data == 'menu':
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç!", reply_markup=keyboardTrue if update == "True" else keyboardFalse)
        pass

async def job():
    update = await check_update(False)
    if (update == "True"):
        await excel_handle()
        await graph_handle()

async def service():
    schedule.every().day.at("07:00").do(job)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    service()
    executor.start_polling(dp, skip_updates=True)